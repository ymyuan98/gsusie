robust_method = "simple",
simple_outlier_fraction = 0.01,
# simple_outlier_thres = 1000,
verbose = T)
# res_gsusie <- gsusie(X, y, family = "poisson", maxL = 10,
#                      max_iters = 500, tol = 1e-2,
#                      coef_prior_variance = 1,
#                      estimate_prior_method = "optim",
#                      robust_estimation = T,
#                      robust_method = "huber",
#                      verbose = T)
# res_gsusie$sets
# round(res_gsusie$alpha, digits = 3)
plot(res_gsusie$pip, ylab = "PIP")
summary.gsusie(res_gsusie)
coefficients.gsusie(res_gsusie)
plot(y)
res_gs_frac001 <- res_gsusie
res_gsusie <- gsusie(X, y, family = "poisson", maxL = 10,
max_iters = 500, tol = 1e-2,
coef_prior_variance = 1,
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = NULL,
simple_outlier_thres = 1000,
verbose = T)
# res_gsusie <- gsusie(X, y, family = "poisson", maxL = 10,
#                      max_iters = 500, tol = 1e-2,
#                      coef_prior_variance = 1,
#                      estimate_prior_method = "optim",
#                      robust_estimation = T,
#                      robust_method = "huber",
#                      verbose = T)
# res_gsusie$sets
# round(res_gsusie$alpha, digits = 3)
plot(res_gsusie$pip, ylab = "PIP")
summary.gsusie(res_gsusie)
coefficients.gsusie(res_gsusie)
res_gs_thres1000 <- res_gsusie
rm(res_gsusie)
res_gsusie <- gsusie(X, y, family = "poisson", maxL = 10,
max_iters = 500, tol = 1e-2,
coef_prior_variance = 1,
estimate_prior_method = "optim",
robust_estimation = F,
verbose = T)
# res_gsusie$sets
# round(res_gsusie$alpha, digits = 3)
plot(res_gsusie$pip, ylab = "PIP")
summary.gsusie(res_gsusie)
coefficients.gsusie(res_gsusie)
res_gs_norob <- res_gsusie
summary.gsusie(res_gs_frac001)
coefficients.gsusie(res_gs_frac001)
summary.gsusie(res_gs_huber)
coefficients.gsusie(res_gs_huber)
summary.gsusie(res_gs_thres1000)
coefficients.gsusie(res_gs_thres1000)
gsusie_get_lfsr(res_gs_thres1000)
summary.gsusie(res_gs_thres1000)
gsusie_get_lfsr(res_gs_huber)
summary.gsusie(res_gs_huber)
coefficients.gsusie(res_gs_huber)
sqrt(h2) * (-2)
sqrt(h2) * 0.5
coefficients.gsusie(res_gs_norob)
source("~/Dropbox/genetics.susie/gsusie/R/robust_adjunct_weights.r", echo=TRUE)
res_gs_huber <- gsusie(X, y, family = "poisson", maxL = 10,
max_iters = 500, tol = 1e-2,
coef_prior_variance = 1,
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "huber",
verbose = T)
coefficients.gsusie(res_gs_huber)
source("~/Dropbox/genetics.susie/gsusie/R/robust_importance_weights.r", echo=TRUE)
rm(list = ls())
################################################################################
########################################
`%&%` <- function(a, b) paste0(a, b)
# getwd()
files_path <- "./R/"
filenames <- list.files(path = files_path)
filenames
filenames <- filenames[filenames != "gsusie.r"]  # remove the "test.r"
for (i in 1 : length(filenames)) {
source(files_path %&% filenames[i])
}
source("~/Dropbox/genetics.susie/gsusie/R/gsusie.r", echo=TRUE)
## Synthesize data
nn <- 500
pp <- 1000
h2 <- 0.8
X <- matrix(rnorm(nn * pp), ncol = pp)
Eta <- sqrt(h2) * (-2*X[,1] + 0.5*X[,6]) + sqrt(1-h2) * rnorm(nn)
expEta <- exp(Eta)
y1 <- rpois(nn, expEta)
y <- exp(scale(log1p(y1)))
plot(y)
## our method
X <- cbind(X, 1)
colnames(X) <- paste0("X", c(1:pp, 0))
dim(X)
length(y)
## Non-robust-estimation
res_gsusie <- gsusie(X, y, family = "poisson", maxL = 10,
max_iters = 500, tol = 1e-2,
coef_prior_variance = 1,
estimate_prior_method = "optim",
robust_estimation = F,
verbose = T)
# res_gsusie$sets
# round(res_gsusie$alpha, digits = 3)
plot(res_gsusie$pip, ylab = "PIP")
summary.gsusie(res_gsusie)
coefficients.gsusie(res_gsusie)
## Huber-weighting
res_gs_huber <- gsusie(X, y, family = "poisson", maxL = 10,
max_iters = 500, tol = 1e-2,
coef_prior_variance = 1,
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "huber",
verbose = T)
plot(res_gs_huber$pip, ylab = "PIP")
summary.gsusie(res_gs_huber)
coefficients.gsusie(res_gs_huber)
## bisquare-weighting
res_gs_bisquare <- gsusie(X, y, family = "poisson", maxL = 10,
max_iters = 500, tol = 1e-2,
coef_prior_variance = 1,
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "bisquare",
verbose = T)
plot(res_gs_bisquare$pip, ylab = "PIP")
coefficients.gsusie(res_gs_bisquare)
coefficients.gsusie(res_gs_huber)
## Threshold-removal
res_gsusie <- gsusie(X, y, family = "poisson", maxL = 10,
max_iters = 500, tol = 1e-2,
coef_prior_variance = 1,
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = NULL,
simple_outlier_thres = 1000,
verbose = T)
# res_gsusie$sets
# round(res_gsusie$alpha, digits = 3)
plot(res_gsusie$pip, ylab = "PIP")
summary.gsusie(res_gsusie)
coefficients.gsusie(res_gsusie)
res_gs_thres1000 <- res_gsusie
## Threshold-removal
res_gsusie <- gsusie(X, y, family = "poisson", maxL = 10,
max_iters = 500, tol = 1e-2,
coef_prior_variance = 1,
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.01,
simple_outlier_thres = NULL,
verbose = T)
# res_gsusie$sets
# round(res_gsusie$alpha, digits = 3)
plot(res_gsusie$pip, ylab = "PIP")
summary.gsusie(res_gsusie)
coefficients.gsusie(res_gsusie)
res_gs_frac001 <- res_gsusie
## Non-robust-estimation
res_gsusie <- gsusie(X, y, family = "poisson", maxL = 10,
max_iters = 500, tol = 1e-2,
coef_prior_variance = 1,
estimate_prior_method = "optim",
robust_estimation = F,
verbose = T)
# res_gsusie$sets
# round(res_gsusie$alpha, digits = 3)
plot(res_gsusie$pip, ylab = "PIP")
summary.gsusie(res_gsusie)
coefficients.gsusie(res_gsusie)
rm(list = ls(all.names = T))
`%&%` <- function(a, b) paste0(a, b)
if.needed <- function(.files, .code) {
if(!all(file.exists(.files))){
.code
}
}
getwd
getwd()
# getwd()
files_path <- "./R/"
r_file_names <- list.files(path = files_path)
r_file_names
for (i in 1 : length(r_file_names)) {
source(files_path %&% r_file_names[i])
}
nn <- 500
pp <- 1000
h2 <- 0.6
set.seed(Sys.Date())
#################################
## Data generation
X <- matrix(rnorm(nn * pp), ncol = pp)
n_effect_vars <- 10  ## number of effective variables
effective_idx <- sort(sample(1 : pp, size = n_effect_vars))
bb <- rnorm(n_effect_vars)
data.frame(variable = paste0("X", effective_idx), effect_size = bb)
Eta <- sqrt(h2) * (X[,effective_idx] %*% as.matrix(bb)) + sqrt(1-h2) * rnorm(nn)
y1 <- rpois(nn, exp(Eta))
y  <- exp(scale(log1p(y1)))  # scale the response
plot(y)
X <- cbind(X, 1)
colnames(X) <- paste0("X", c(1:pp, 0))
# Non-robust estimation
res_gs_nr <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = F)
# Huber weighting
res_gs_hb <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "huber")
summary.gsusie(res_gs_nr)
plot(res_gs_nr$pip)
unlist(res_gs_nr$sets$cs)
evaluate_ppv(unlist(res_gs_nr$sets$cs), effective_idx)
evaluate_ppv(unlist(res_gs_hb$sets$cs), effective_idx)
# Bisquare weighting
res_gs_bs <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "bisquare")
evaluate_ppv(unlist(res_gs_bs$sets$cs), effective_idx)
coefficients.gsusie(res_gs_bs)
coefficients.gsusie(res_gs_hb)
unlist(res_gs_hb$sets$cs)
sort(unlist(res_gs_hb$sets$cs))
sort(effective_idx)
# Weight dropped by fractions - 0.01
res_gs_frc1 <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.01)
# Weight dropped by fractions - 0.01
res_gs_frc1 <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.01)
# Weight dropped by fractions - 0.01
res_gs_frc1 <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.01,
verbose = T)
source("~/Dropbox/genetics.susie/gsusie/R/robust_importance_weights.r", echo=TRUE)
# Weight dropped by fractions - 0.01
res_gs_frc1 <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.01,
simple_outlier_thres = NULL,
verbose = T)
# Weight dropped by fractions - 0.05
res_gs_frc1 <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.05)
# Weight dropped by fractions - 0.05
res_gs_frc1 <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.05,
verbose = T)
plot(res_gs_frc1$elbo)
plot(res_gs_frc1$elbo[100:500])
plot(res_gs_frc1$pip)
evaluate_ppv(unlist(res_gs_frc1$sets$cs), effective_idx)
coefficients.gsusie(res_gs_frc1)
unlist(res_gs_frc1$sets$cs)
evaluate_tpr(unlist(res_gs_frc1$sets$cs), effective_idx)
# Weight dropped by fractions - 0.01
res_gs_frc1 <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.01,
simple_outlier_thres = NULL,
verbose = T)
plot(res_gs_frc1$pip[100:500])
plot(res_gs_frc1$elbo[100:500])
plot(res_gs_frc1$elbo[100:500], type = "line")
?plot
plot(res_gs_frc1$elbo[100:500], type = "l")
coefficients.gsusie(res_gs_frc1)
evaluate_ppv(unlist(res_gs_frc1$sets$cs), effective_idx)
sort(effective_idx)
sort(unlist(res_gs_frc1$sets$cs))
res_gs_frc1$sets
coefficients.gsusie(res_gs_frc1)
coefficients.gsusie(res_gs_frc1, top_n = 15)
unlist(res_gs_frc1$sets$cs)
sort(unlist(res_gs_frc1$sets$cs))
effective_idx
sort(unlist(res_gs_hb$sets$cs))
sort(unlist(res_gs_bs$sets$cs))
# Weight dropped by fractions - 0.05
res_gs_frc5 <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.05,
verbose = T)
evaluate_ppv(unlist(res_gs_frc5$sets$cs), effective_idx)
coefficients.gsusie(res_gs_frc5)
effective_idx
coefficients.gsusie(res_gs_hb)
coefficients.gsusie(res_gs_hb, top_n = 15)
effective_idx
evaluate_ppv(unlist(res_gs_frc1$sets$cs)
)
unlist(res_gs_frc1$sets$cs)
vars <- unlist(res_gs_frc1$sets$cs)
vars
vars[vars != (pp+1)]
vars <- unlist(res_gs_frc5$sets$cs)
vars
vars[vars != (pp+1)]
#' filter out X0 if any
filter_out_x0 <- function(vars, pp){
out_vars <- vars[vars != (pp+1)]
return(out_vars)
}
rm(filter_out_x0)
#' drop X0 (if any) in the final results
drop_X0 <- function(vars, pp){
out_vars <- vars[vars != (pp+1)]
return(out_vars)
}
effect_idx <- effective_idx
rm(effective_idx)
evaluate_ppv(drop_X0(unlist(res_gs_frc1$sets$cs)), effect_idx)
length(res_gs_hb$mu)
dim(res_gs_hb)
dim(res_gs_hb$mu)
names(res_gs_hb$mu)
colnames(res_gs_hb$mu)
rm(drop_X0)
class(res_gs_bs)
## source functions
# library(tidyverse)
library(glmnet)
?cv.glmnet
# GLMNET
res_glmnet <- cv.glmnet(x = X[, -(pp+1)], y, family = "poisson")
summary(res_glmnet)
class(res_glmnet)
require(coefplot)
extract.coef(res_glmnet)[1:5, ]
vars <- extract.coef(res_glmnet)[extract.coef(res_glmnet)[,3] !=   "(Intercept)",3]
length(vars)
vars
View(extract.coef(res_glmnet))
vars <- extract.coef(res_glmnet) %>%
arrage(desc(abs(Value)))
library(tidyverse)
vars <- extract.coef(res_glmnet) %>%
arrage(desc(abs(Value)))
vars <- extract.coef(res_glmnet) %>%
arrange(desc(abs(Value)))
View(vars)
effect_idx
plot(vars$Coefficient, vars$Value)
vars <- vars[vars[, 3] != "(Intercept)", ]
plot(vars$Coefficient, vars$Value)
plot(vars$Value)
vars <- extract.coef(res_glmnet) %>%
arrange(desc(abs(Value)))
View(vars)
vars <- extract.coef(res_glmnet) %>%
arrange(desc(abs(`Value`)))
rm(vars)
out <- extract.coef(res_glmnet)[extract.coef(res_glmnet)[,3] !=   "(Intercept)", ]
View(out)
rm(list = ls())
## source functions
# library(tidyverse)
library(glmnet)
`%&%` <- function(a, b) paste0(a, b)
if.needed <- function(.files, .code) {
if(!all(file.exists(.files))){
.code
}
}
# getwd()
files_path <- "./R/"
r_file_names <- list.files(path = files_path)
for (i in 1 : length(r_file_names)) {
source(files_path %&% r_file_names[i])
}
library(tidyverse)
nn <- 500
pp <- 1000
h2 <- 0.6
## nr: no-robust
## hb: huber-weighting
## bs: bisquare-weighting
## fc1: fraction 0.01
## fc5: fraction 0.05
rec_gs_nr <- rec_gs_hb <- rec_gs_bs <- rec_gs_fc1 <- rec_gs_fc5 <- rec_glmnet <-
prc_gs_nr <- prc_gs_hb <- prc_gs_bs <- prc_gs_fc1 <- prc_gs_fc5 <- prc_glmnet <-
rep(NA, times = n_trials)
#################################
## Data generation
X <- matrix(rnorm(nn * pp), ncol = pp)
n_effect_vars <- 10  ## number of effective variables
effect_idx <- sort(sample(1 : pp, size = n_effect_vars))
bb <- rnorm(n_effect_vars)
Eta <- sqrt(h2) * (X[,effect_idx] %*% as.matrix(bb)) + sqrt(1-h2) * rnorm(nn)
y1 <- rpois(nn, exp(Eta))
y  <- exp(scale(log1p(y1)))  # scale the response
X <- cbind(X, 1)  # Intercept is always put at last
colnames(X) <- paste0("X", c(1:pp, 0))
data.frame(variable = paste0("X", effect_idx), effect_size = bb)
plot(y)
# Non-robust estimation
res_gs_nr <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = F)
plot(res_gs_nr)
plot(res_gs_nr$pip)
coefficients.gsusie(res_gs_nr)
data.frame(variable = paste0("X", effect_idx), effect_size = bb)
evaluate_ppv(drop_X0(unlist(res_gs_nr$sets$cs), pp), effect_idx)
evaluate_ppv(unlist(res_gs_nr$sets$cs), effect_idx)
evaluate_tpr(unlist(res_gs_nr$sets$cs), effect_idx)
# Huber weighting
res_gs_hb <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "huber")
plot(res_gs_hb$pip)
coefficients.gsusie(res_gs_hb)
effect_idx
evaluate_ppv(unlist(res_gs_hb$sets$cs), effect_idx)
evaluate_tpr(unlist(res_gs_hb$sets$cs), effect_idx)
# Bisquare weighting
res_gs_bs <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "bisquare")
evaluate_ppv(unlist(res_gs_bs$sets$cs), effect_idx)
plot(res_gs_bs$pip)
coefficients.gsusie(res_gs_bs)
coefficients.gsusie(res_gs_hs)
coefficients.gsusie(res_gs_hb)
# Weight dropped by fractions - 0.01
res_gs_frc1 <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.01,
simple_outlier_thres = NULL,
verbose = T)
plot(res_gs_frc1$elbo)
plot(res_gs_frc1$elbo[100:500])
plot(res_gs_frc1$elbo[100:500], type = "l")
plot(res_gs_frc1$elbo[400:500], type = "l")
evaluate_ppv(unlist(res_gs_frc1$sets$cs), effect_idx)
coefficients.gsusie(res_gs_frc1)
plot(res_gs_frc1$pip)
evaluate_tpr(unlist(res_gs_frc1$sets$cs), effect_idx)
evaluate_tpr(unlist(res_gs_bs$sets$cs), effect_idx)
evaluate_tpr(unlist(res_gs_hb$sets$cs), effect_idx)
# Weight dropped by fractions - 0.05
res_gs_frc5 <- gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "simple",
simple_outlier_fraction = 0.05,
verbose = T)
plot(res_gs_frc5$elbo)
plot(res_gs_frc5$elbo[200:500])
plot(res_gs_frc5$elbo[100:500])
coefficients.gsusie(res_gs_frc5)
evaluate_ppv(unlist(res_gs_frc5$sets$cs), effect_idx)
evaluate_tpr(unlist(res_gs_frc5$sets$cs), effect_idx)
# GLMNET
res_glmnet <- cv.glmnet(x = X[, -(pp+1)], y, family = "poisson")
require(coefplot)
out <- extract.coef(res_glmnet)[extract.coef(res_glmnet)[,3] !=   "(Intercept)", ]
View(out)
out <- out[order(abs(out$Value), decreasing = T), ]
View(out)
effect_idx
glmnet_top_n <- 20
out[1 : glmnet_top_n, 3]
out <- out[1 : glmnet_top_n, 3]
out <- parse_number(out)
out
get_selected_vars <- functions(res,
gs_included_X0 = TRUE,
glmnet_top_n = NULL) {
sessionInfo()
