res_la <- glmnet(X, exp(scale(log1p(y))), family = "poisson", lambda = 1)
coef_la <- data.frame(coef = as.numeric(coefficients(res_la))[-1])
row.names(coef_la) <- paste0("X", 1 : pp)
coef_la
## Elastic-Net
res_en <- glmnet(X, exp(scale(log1p(y))), family = "poisson", lambda = 0.5)
coef_en <- data.frame(coef = as.numeric(coefficients(res_en))[-1])
row.names(coef_en) <- paste0("X", 1 : pp)
coef_en
summary(res_su)
gsusie_coefficients(res_su)
res_su <- susie(X, y)
summary(res_su)
## SuSiE
res_su <- susie(X, exp(scale(log1p(y))))
summary(res_su)
gsusie_coefficients(res_su)
res_la <- glmnet(X, y, family = "poisson", lambda = 1)
coef_la <- data.frame(coef = as.numeric(coefficients(res_la))[-1])
row.names(coef_la) <- paste0("X", 1 : pp)
coef_la
# preload_bed_data
data.dir <- "~/Documents/research/data/genotype/"
.bk.file <- data.dir %&% "1000G_phase3_common_norel.rds"
if(!file.exists(.bk.file)){
BED <- snp_readBed(.bed.file)
}
dat <- snp_attach(.bk.file)$genotypes
nn <- 500
pp <- 2000
h2 <- 0.4
n_effect_vars <- 5
set.seed(20231129)
startpoint <- sample(1 : (ncol(dat)-10000), size = 9000)[7530]
set.seed(startpoint)
## sub-sample individuals
if (nn < 2490) { ii.idx <- sample(1 : 2490, size = nn) }
X <- dat[ii.idx, startpoint : (startpoint+pp-1)]
effect_idx <- sort(sample(1 : pp, size = n_effect_vars))
bb <- rnorm(n_effect_vars)
data.frame(variable = paste0("X", effect_idx), effect_size = bb)
Eta <- sqrt(h2) * (scale(X[ ,effect_idx, drop = F]) %*% as.matrix(bb)) +
sqrt(1-h2) * rnorm(nn)
y1 <- rpois(nn, exp(Eta))
y  <- exp(scale(log1p(y1)))  # scale the response
plot(y)
X <- cbind(X, 1)  # Intercept is always put at last
colnames(X) <- paste0("X", c(1:pp, 0))
# Non-robust estimation (vanilla)
res_gs_vn <- tryCatch({
gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = F)
}, error = function(err) {
message("Vanilla. seed:", seed, ". error: ", err)
})
summary(res_gs_vn)
gsusie_coefficients(res_gs_vn)
effect_idx
### Huber-M
res_gs_hb_M <- tryCatch({
gsusie(X, y, family = "poisson",
estimate_prior_method = "optim",
robust_estimation = T,
robust_method = "huber",
tuning_k = "M")
}, error = function(err) {
message("Huber-M. seed: ", seed, " error: ", err)
})
summary(res_gs_hb_M)
gsusie_coefficients(res_gs_hb_M)
effect_idx
### Comparison: SuSiE
res_su <- susie(X = X[, -ncol(X)], y = y)
summary(res_su)
gsusie_coefficients(res_su)
effect_idx
?bigsnpr
startpoint
?snp_readBed
library(glmnet)
?glmnet
rm(list = ls())
library(data.table)
dat <- fread("./tests/exp_seq.LAML-US.tsv")
dat
View(dat)
document()
library(devtools)
document()
document()
?optim
?sd
?quantile
document()
document()
document()
document()
document()
document()
document()
document()
document()
use_mit_license()
document()
document()
document()
document()
document()
document()
?MASS
??MASS
document()
document()
document()
warnings()
document()
library(gsusie)
library(gsusie)
?gsusie
## A Poisson regression case ------------------------------------------------
set.seed(20231130)
# Generative data model
nn <- 1000
pp <- 10
X <- matrix(rnorm(nn * pp), ncol = pp)
X[,1:2] <- MASS::mvrnorm(nn, mu = c(0,0),
Sigma = matrix(c(1, 0.8, 0.8, 1), nrow = 2))
X[,5:7] <- MASS::mvrnorm(nn, mu = rep(0, 3),
Sigma = matrix(c(1, 0.6, 0.9,
0.6, 1, 0.75,
0.9, 0.75, 1),
nrow = 3, byrow = TRUE))
effect_idx <- c(1, 6)
Eta <- scale(X[,effect_idx, drop=FALSE] %*% as.matrix(c(-2, 0.2)))
y <- rpois(nn, exp(Eta))
plot(y)
plot(exp(scale(log1p(y))))
## Vanilla G-SuSiE
res_gs <- gsusie(cbind(X, 1), exp(scale(log1p(y))), family = "poisson")
summary(res_gs)
## Robust G-SuSiE for Poisson regression
res_gs <- gsusie(cbind(X, 1), exp(scale(log1p(y))), family = "poisson",
robust_estimation = TRUE, robust_method = "huber",
robust_tuning_method = "M")
summary(res_gs)
## A logistic regression case -----------------------------------------------
set.seed(20240103)
# Generative data model
nn <- 1000
pp <- 10
X <- matrix(rnorm(nn * pp), ncol = pp)
effect_idx <- c(1, 6)
bb <- rnorm(2)
Eta <- scale(X[,effect_idx, drop=FALSE] %*% as.matrix(bb))
expit <- function(eta) {
ifelse(eta > 0, 1 / (1 + exp(-eta)), exp(eta) / (1 + exp(eta)))
}
y <- rbinom(nn, 1, expit(Eta))
## Vanilla GSuSiE for logistic regression
res_gs <- gsusie(X, y, family = "binomial")
summary(res_gs)
gsusie_coefficients(res_gs)
bb
Eta <- X[,effect_idx, drop=FALSE] %*% as.matrix(bb)
expit <- function(eta) {
ifelse(eta > 0, 1 / (1 + exp(-eta)), exp(eta) / (1 + exp(eta)))
}
y <- rbinom(nn, 1, expit(Eta))
## Vanilla GSuSiE for logistic regression
res_gs <- gsusie(X, y, family = "binomial")
summary(res_gs)
gsusie_coefficients(res_gs)
bb
remove.packages("gsusie")
library(devtools)
install_github("ymyuan98/gsusie")
devtools::install_github("ymyuan98/gsusie")
devtools::install_github("ymyuan98/gsusie")
library(testthat)
usethis::use_testthat(3)
use_test()
usethis::use_test()
library(gsusie)
test_check("gsusie")
library(usethis)
use_test("check_abnormal_subjects")
use_test("gsusie")
ER2_original_res <- readRDS("~/Desktop/ER2_original_res.rds")
ER2_original_res
rm(list = ls())
use_test("compute_functions.R")
use_test("gsusie_get_objective.R")
use_test("compute_colstats.R")
X <- matrix(1:9, nrow = 3)
X
scale(X)
compute_colstats
compute_colstats <- function(X, center = FALSE, scale = TRUE) {
out <- list()
if (!center) {
out$cm <- colMeans(X)
} else {
out$cm <- rep(0, times = ncol(X))
}
if (scale) {
out$csd <- apply(X, 2, sd)
} else {
out$csd <- rep(1, times = ncol(X))
}
return(out)
}
compute_colstats(X)
compute_colstats(X, TRUE)
X <- matrix(1:9, nrow = 3)
expect_equal(compute_colstats(X), c(2, 5, 8))
expect_equal(compute_colstats(X)$cm, c(2, 5, 8))
expect_equal(compute_colstats(X)$csd, rep(1, times = 3))
expect_equal(compute_colstats(X, center = FALSE)$cm,  rep(0, times = 3))
compute_colstats <- function(X, center = TRUE, scale = TRUE) {
out <- list()
if (center) {
out$cm <- colMeans(X)
} else {
out$cm <- rep(0, times = ncol(X))
}
if (scale) {
out$csd <- apply(X, 2, sd)
} else {
out$csd <- rep(1, times = ncol(X))
}
return(out)
}
compute_colstats(X, center = FALSE)$cm
expect_equal(compute_colstats(X, center = FALSE)$cm,  rep(0, times = 3))
X <- matrix(1:16, nrow = 4)
X
scale(X)
X <- matrix(1:25, nrow = 5)
X
scale(X)
X <- matrix(1:12, nrow = 3)
X
scale(X)
attr(scale(X))
attr(scale(X), "scaled:center")
X <- matrix(1:16, nrow = 4)
expect_equal(compute_colstats(X)$cm,  attr(scale(X), "scaled:center"))
expect_equal(compute_colstats(X, center = FALSE)$cm,  rep(0, times = 4))
expect_equal(compute_colstats(X)$csd, attr(scale(X), "scaled:scale"))
expect_equal(compute_colstats(X, scale = FALSE)$csd, rep(1, times = 4))
test_check("test-compute_colstats.R")
test_that("compute column-wise means and standard deviations", {
X <- matrix(1:16, nrow = 4)
expect_equal(compute_colstats(X)$cm,  attr(scale(X), "scaled:center"))
expect_equal(compute_colstats(X, center = FALSE)$cm,  rep(0, times = 4))
expect_equal(compute_colstats(X)$csd, attr(scale(X), "scaled:scale"))
expect_equal(compute_colstats(X, scale = FALSE)$csd, rep(1, times = 4))
})
use_test("compute_Xb.R")
X <- matrix(1:9, nrow = 3)
X
b <- c(1, 2, 3)
as.matrix(b)
X %*% b
expect_equal(compute_Xb(X, b), as.matrix(c(30, 36, 42)))
compute_Xb <- function(X, b) {
if (!is.matrix(X))
stop("Input X should be a matrix")
if (!is.matrix(b)) {
b <- as.matrix(as.array(b))
if (dim(b)[2] != 1)
stop("Input b should be a (p x 1) matrix")
}
if (dim(X)[2] != dim(b)[1])
stop("2nd dim of X and 1st dim of b do not match")
return(X %*% b)
}
expect_equal(compute_Xb(X, b), as.matrix(c(30, 36, 42)))
test_that("Matrix times a vector", {
X <- matrix(1:9, nrow = 3)
b <- c(1, 2, 3)
expect_equal(compute_Xb(X, b), as.matrix(c(30, 36, 42)))
})
use_r("gsusie")
library(testthat)
use_r("gsusie")
library(usethis)
use_r("gsusie")
use_r("compute_colstats")
use_r("model_logistic")
use_test("model_logistic.R")
expit <- function(eta) {
res <- ifelse(eta > 0,
1 / (1 + exp(-eta)),
exp(eta) / (1 + exp(eta)))
return(res)
}
expect_equal(expit(0), 1/2)
expect_equal(expit(1000), 1)
expect_equal(expit(1000), 1/2)
expect_equal(expit(-1000), 0)
test_that("check the stability of the expit function", {
## standard case
expect_equal(expit(0), 1/2)
## extremely large positive values
expect_equal(expit(1000), 1)
## extremely large negative values
expect_equal(expit(-1000), 0)
})
install.packages("roxygen2md")
install.packages("pkgdown")
library(devtools)
library(usethis)
document("gsusie")
library(bigsnpr)
?bigsnpr
library(gsusie)
knitr::opts_chunk$set(
collapse = TRUE, comment = "#>",
fig.width = 5, fig.height = 3, fig.align = "center", fig.cap = "&nbsp;",
dpi = 120
)
library(bigsnpr)
data.dir <- "./data/genotype/"
dir.create(data.dir, recursive=TRUE, showWarnings=FALSE)
.bed.file <- data.dir %&% "1000G_phase3_common_norel.bed"
`%&%` <- function(a,b) paste0(a,b)
.bed.file <- data.dir %&% "1000G_phase3_common_norel.bed"
if (!file.exists(.bed.file)) {
bigsnpr::download_1000G(data.dir)
}
knitr::opts_chunk$set(
collapse = TRUE, comment = "#>",
fig.width = 5, fig.height = 3, fig.align = "center", fig.cap = "&nbsp;",
dpi = 120
)
# install.packages("bigsnpr")
library(bigsnpr)
`%&%` <- function(a,b) paste0(a,b)
data.dir <- "./data/genotype/"
dir.create(data.dir, recursive=TRUE, showWarnings=FALSE)
.bed.file <- data.dir %&% "1000G_phase3_common_norel.bed"
if (!file.exists(.bed.file)) {
bigsnpr::download_1000G(data.dir)
}
.bk.file <- data.dir %&% "1000G_phase3_common_norel.rds"
if (!file.exists(.bk.file)){
BED <- snp_readBed(.bed.file)
}
data.dir <- "./data/genotype/"
dir.create(data.dir, recursive=TRUE, showWarnings=FALSE)
.bed.file <- data.dir %&% "1000G_phase3_common_norel.bed"
if (!file.exists(.bed.file)) {
bigsnpr::download_1000G(data.dir)
}
nn <- 500
pp <- 2000
X <- matrix(rnorm(nn * pp), ncol = pp)
set.seed(123456)
nn <- 500
pp <- 2000
X <- matrix(rnorm(nn * pp), ncol = pp)
effect_idx <- sample(1:pp, size = 5)
effect_idx
effect_size <- rep(1, times = 5)
library(moderndive)
install.packages("moderndivd")
install.packages("moderndive")
rm(list = ls(all.names = T))
`%&%` <- function(a,b) paste0(a,b)
set.seed(123456)
nn <- 500
pp <- 2000
X <- matrix(rnorm(nn * pp), ncol = pp)
## independent variables with non-zero effects
effect_idx <- sample(1:pp, size = 5)
effect_idx
## effect size
effect_size <- rep(1, times = 5)
Eta <- scale(X[,effect_idx, drop=F] %*% as.matrix(effect_size))
expit <- function(eta) {
ifelse(eta > 0, 1 / (1 + exp(-eta)), exp(eta) / (1 + exp(eta)))
}
y <- rbinom(nn, 1, expit(Eta))
?gsusie
library(gsusie)
?gsusie
res_gs <- gsusie(cbind(X, 1), y, family = "binomial",
maxL = 10)
summary(res_gs)
gsusie_coefficients(res_gs)
## effect size
effect_size <- rep(2, times = 5)
Eta <- scale(X[,effect_idx, drop=F] %*% as.matrix(effect_size))
expit <- function(eta) {
ifelse(eta > 0, 1 / (1 + exp(-eta)), exp(eta) / (1 + exp(eta)))
}
y <- rbinom(nn, 1, expit(Eta))
res_gs <- gsusie(cbind(X, 1), y, family = "binomial",
maxL = 10)
summary(res_gs)
gsusie_coefficients(res_gs)
res_su <- susie(cbind(X, 1), y)
library(susie)
library(susieR)
library(susieR)
res_su <- susie(cbind(X, 1), y)
summary(res_su)
gsusie_coefficients(res_su)
`%&%` <- function(a,b) paste0(a,b)
set.seed(123456)
nn <- 500
pp <- 1000
X <- matrix(rnorm(nn * pp), ncol = pp)
## independent variables with non-zero effects
effect_idx <- sample(1:pp, size = 5)
effect_idx
## effect size
effect_size <- rep(1, times = 5)
Eta <- scale(X[,effect_idx, drop=F] %*% as.matrix(effect_size))
expit <- function(eta) {
ifelse(eta > 0, 1 / (1 + exp(-eta)), exp(eta) / (1 + exp(eta)))
}
y <- rbinom(nn, 1, expit(Eta))
res_gs <- gsusie(cbind(X, 1), y, family = "binomial",
maxL = 10)
summary(res_gs)
gsusie_coefficients(res_gs)
library(susieR)
res_su <- susie(cbind(X, 1), y)
summary(res_su)
gsusie_coefficients(res_su)
library(susieR)
res_su <- susie(cbind(X, 1), y)
summary(res_su)
gsusie_coefficients(res_su)
`%&%` <- function(a,b) paste0(a,b)
set.seed(123456789)
nn <- 500
pp <- 1000
X <- matrix(rnorm(nn * pp), ncol = pp)
## independent variables with non-zero effects
effect_idx <- sample(1:pp, size = 5)
effect_idx
## effect size
effect_size <- rep(5, times = 5)
Eta <- scale(X[,effect_idx, drop=F] %*% as.matrix(effect_size))
expit <- function(eta) {
ifelse(eta > 0, 1 / (1 + exp(-eta)), exp(eta) / (1 + exp(eta)))
}
y <- rbinom(nn, 1, expit(Eta))
res_gs <- gsusie(cbind(X, 1), y, family = "binomial",
maxL = 10)
summary(res_gs)
gsusie_coefficients(res_gs)
library(susieR)
res_su <- susie(cbind(X, 1), y)
summary(res_su)
gsusie_coefficients(res_su)
## effect size
effect_size <- rep(1, times = 5)
# install.packages("bigsnpr")
library(bigsnpr)
`%&%` <- function(a,b) paste0(a,b)
data.dir <- "./data/genotype/"
dir.create(data.dir, recursive=TRUE, showWarnings=FALSE)
.bed.file <- data.dir %&% "1000G_phase3_common_norel.bed"
if (!file.exists(.bed.file)) {
bigsnpr::download_1000G(data.dir)
}
.bk.file <- data.dir %&% "1000G_phase3_common_norel.rds"
if (!file.exists(.bk.file)){
BED <- snp_readBed(.bed.file)
}
.bed.file <- data.dir %&% "1000G_phase3_common_norel.bed"
if (!file.exists(.bed.file)) {
bigsnpr::download_1000G(data.dir)
}
if (!file.exists(.bed.file)) {
bigsnpr::download_1000G(data.dir)
}
if (!file.exists(.bed.file)) {
bigsnpr::download_1000G(data.dir)
}
.bk.file <- data.dir %&% "1000G_phase3_common_norel.rds"
!file.exists(.bk.file)
data.dir <- "./data/genotype/"
dir.create(data.dir, recursive=TRUE, showWarnings=FALSE)
.bk.file <- data.dir %&% "1000G_phase3_common_norel.rds"
!file.exists(.bk.file)
file.exists(.bk.file)
getwd()
dat <- snp_attach(.bk.file)$genotypes
knitr::opts_chunk$set(
collapse = TRUE, comment = "#>",
fig.width = 5, fig.height = 3, fig.align = "center", fig.cap = "&nbsp;",
dpi = 120
)
`%&%` <- function(a,b) paste0(a,b)
# install.packages("bigsnpr")
library(bigsnpr)
# install.packages("bigsnpr")
library(bigsnpr)
`%&%` <- function(a,b) paste0(a,b)
data.dir <- "./data/genotype/"
dir.create(data.dir, recursive=TRUE, showWarnings=FALSE)
.bed.file <- data.dir %&% "1000G_phase3_common_norel.bed"
!file.exists(.bed.file)
.bk.file <- data.dir %&% "1000G_phase3_common_norel.rds"
!file.exists(.bk.file)
dat <- snp_attach(.bk.file)$genotypes
